#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## Reading Files

# In programming, we work with files all the time. It's such a useful task that most programming languages have the ability to work with files baked into the core set of features.
# Python is no exception. It gives us file objects which we can use to read and write to files. To open a file on a computer called spider.txt, we can write this code.

file = open("spider.txt")

# What we're doing here is creating a new file object and assigning it to a variable called File. The parameter we've passed to the open function is the name of the file we want 
# to open. In this case, we're assuming the file we want to read is in the same directory as a script we're running but we can just as easily pass an absolute paths to open a 
# file in a different directory. When we open a file, like we're doing in this example, the operating system checks that we have permissions to access that file and then gives 
# our code a file descriptor. This is a token generated by the OS that allows programs to do more operations with the file. In Python, this file descriptor is stored as an 
# attribute of the files object. The file object gives us a bunch of methods that we can use to operate with the file. Now, with this file object, we can read the contents of 
# the file and print them to the screen.

print(file.readline())
# The itsy bitsy spider climbed up the watersprout.

# Each time we call the readline method, the file object updates the current position in the file. So it keeps moving forward. We can also call the read method, which reads from 
# the current position until the end of the file instead of just one line

print(file.read())
# The itsy bitsy spider climbed up the watersprout.

# Both methods read from the current position. The readline() method reads one line, while read() reads until the end of the file.

# Finally, we close the file using the close method.

fiel.close()

# This open-use-close pattern is a typical way of working with files in most programming languages. It's a good idea to close files after you've opened them for a few reasons. 
# First, when a file is opening your script, your file system usually lock it down and so no other programs or scripts can use it until you're finished. 
# Second, there's a limited number of file descriptors that you can create before your file system runs out of them. Although this number might be high, it's possible to open a
# lot of files and deplete your file system resources. This can happen if we're opening files in a loop, for example. 
# Third, leaving open files hanging around can lead to race conditions which occur when multiple processes try to modify and read from one resource at the same time and can 
# cause all sorts of unexpected behavior.

# So to help us remember to close the file after at the we're done using it, Python lets us create a block of code by using the keyword "with
with open("spider.text) as file:
          print(file.readline())

# When we use a "with" block, Python will automatically close the file. So we don't need to remember to do that ourselves. One last thing to think about, thanks Python. 
# Both the open-use-close approach and the "with" approach have their advantages. 
# Using a "with" block is a good way to open and work on a single file then have the file automatically closed at the end of the block. On the flip side, 
# using open outside of a block means we can use a file object in other places in our code. So we're not restricted to just one single block. But when taking this approach, 
# we need to remember to close it when we're finished
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## Iterating through Files

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## Iterating through Files

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
